# Copyright Contributors to the Open Cluster Management project

kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    policy.open-cluster-management.io/uninstalling: '{{ .Values.uninstallationAnnotation }}'
  name: {{ include "controller.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "controller.fullname" . }}
    chart: {{ include "controller.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    addon.open-cluster-management.io/hosted-manifest-location: hosting
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ include "controller.name" . }}
      release: {{ .Release.Name }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: {{ .Chart.Name }}
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        app: {{ include "controller.fullname" . }}
        chart: {{ include "controller.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.global.imageOverrides.config_policy_controller }}"
        imagePullPolicy: "{{ .Values.global.imagePullPolicy }}"
        command: ["config-policy-controller"]
        args:
          - controller
          - "--enable-lease=true"
          - "--cluster-name={{ .Values.clusterName }}"
          {{- if eq (.Values.replicas | int) 1 }}
          - '--leader-elect=false'
          {{- end }}
          - --log-encoder={{ .Values.args.logEncoder }}
          - --log-level={{ if eq (toString .Values.args.logLevel) "-1" }}error{{ else }}{{ .Values.args.logLevel }}{{end}}
          - --v={{ .Values.args.pkgLogLevel }}
          - --evaluation-concurrency={{ .Values.args.evaluationConcurrency }}
          - --client-max-qps={{ .Values.args.clientQPS }}
          - --client-burst={{ .Values.args.clientBurst }}
          - --health-probe-bind-address=:8081
          {{- if and .Values.prometheus.enabled (eq .Values.kubernetesDistribution "OpenShift") }}
          - --secure-metrics=true
          - --metrics-bind-address=0.0.0.0:8443
          {{- else if .Values.prometheus.enabled }}
          - --metrics-bind-address=0.0.0.0:8383
          {{- end }}
          {{- if eq .Values.installMode "Hosted" }}
          - --target-kubeconfig-path=/var/run/managed-kubeconfig/kubeconfig
          {{- end }}
          {{- if not .Values.operatorPolicy.disabled }}
          - --enable-operator-policy=true
          {{- if ne .Values.operatorPolicy.defaultNamespace "" }}
          - --operator-policy-default-namespace={{ .Values.operatorPolicy.defaultNamespace }}
          {{- end }}
          {{- end }}
        env:
          - name: WATCH_NAMESPACE
            {{- if eq .Values.installMode "Hosted" }}
            value: {{ .Release.Namespace }}
            {{- else }}
            value: {{ .Values.clusterName }}
            {{- end }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OPERATOR_NAME
            value: {{ include "controller.fullname" . }}
          {{- if .Values.global.proxyConfig }}
          - name: HTTP_PROXY
            value: {{ .Values.global.proxyConfig.HTTP_PROXY }}
          - name: HTTPS_PROXY
            value: {{ .Values.global.proxyConfig.HTTPS_PROXY }}
          - name: NO_PROXY
            value: {{ .Values.global.proxyConfig.NO_PROXY }}
          {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          failureThreshold: 3
          periodSeconds: 10
          {{- if semverCompare "< 1.20.0" (.Values.hostingClusterCapabilities.KubeVersion.Version | default .Capabilities.KubeVersion.Version) }}
          initialDelaySeconds: 300
          {{- end }}
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          failureThreshold: 3
          periodSeconds: 10
          {{- if semverCompare "< 1.20.0" (.Values.hostingClusterCapabilities.KubeVersion.Version | default .Capabilities.KubeVersion.Version) }}
          initialDelaySeconds: 300
          {{- end }}
        {{- if semverCompare ">= 1.20.0" (.Values.hostingClusterCapabilities.KubeVersion.Version | default .Capabilities.KubeVersion.Version) }}
        {{- /* startupProbe became stable in k8s 1.20 */}}
        startupProbe:
          httpGet:
            path: /readyz
            port: 8081
          failureThreshold: 30
          periodSeconds: 10
        {{- end }}
        {{- if and .Values.prometheus.enabled (eq .Values.kubernetesDistribution "OpenShift") }}
        ports:
        - name: metrics
          protocol: TCP
          containerPort: 8443
        {{- else if .Values.prometheus.enabled }}
        ports:
        - name: metrics
          protocol: TCP
          containerPort: 8383
        {{- end }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
          {{- if and .Values.prometheus.enabled (eq .Values.kubernetesDistribution "OpenShift") }}
          - mountPath: "/var/run/metrics-cert"
            name: metrics-cert
            readOnly: true
          - name: klusterlet-config
            mountPath: /var/run/klusterlet
          {{- end }}
          {{- if eq .Values.installMode "Hosted" }}
          - mountPath: "/var/run/managed-kubeconfig"
            name: managed-kubeconfig-secret
            readOnly: true
          {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
      volumes:
        - name: klusterlet-config
          secret:
            secretName: {{ .Values.hubKubeConfigSecret }}
        {{- if eq .Values.installMode "Hosted" }}
        - name: managed-kubeconfig-secret
          secret:
            secretName: {{ .Values.managedKubeConfigSecret }}
        {{- end }}
        {{- if and .Values.prometheus.enabled (eq .Values.kubernetesDistribution "OpenShift") }}
        - name: metrics-cert
          secret:
            secretName: {{ include "controller.fullname" . }}-metrics
        {{- end }}
      {{- if .Values.global.imagePullSecret }}
      imagePullSecrets:
      - name: "{{ .Values.global.imagePullSecret }}"
      {{- end }}
      affinity: {{ toYaml .Values.affinity | nindent 8 }}
      {{- if hasKey .Values "tolerations" }}
      tolerations: {{ toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if hasKey .Values.global "nodeSelector" }}
      nodeSelector: {{ toYaml .Values.global.nodeSelector | nindent 8 }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccount: {{ include "controller.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
        {{- if semverCompare ">= 1.25.0" (.Values.hostingClusterCapabilities.KubeVersion.Version | default .Capabilities.KubeVersion.Version) }}
        {{- /* newer OpenShift (4.12+) versions might require this to be explicitly set */}}
        {{- /* but not all older kubernetes versions can handle when it is set */}}
        seccompProfile:
          type: RuntimeDefault
        {{- end }}
      terminationGracePeriodSeconds: 120
